function ballObj(c) {    this.canvas = c;    this.X = BALL_START_X    this.Y = BALL_START_Y;    this.dx = 1;    this.dy= 1;    this.Radius = BALL_RADIUS;    this.Diameter = this.Radius*2;        this.Left = function() { return this.X - this.Radius; };    this.Right = function() { return this.X + this.Radius; };    this.Lower = function() { return this.Y + this.Radius; };    this.Upper = function() { return this.Y - this.Radius; };        this.boundarySnd = new Audio('boundary.mp3');    this.outSnd = new Audio('out.mp3');        this.move = function () {            this.X += this.dx;            this.Y += this.dy;            if(this.Left()<=0 || this.Right()>=this.canvas.Width) this.bounceOfWall();            if(this.Upper()<=0) this.bounceOfCeling();    };        this.bounceOfWall = function() {            this.dx=-this.dx;	    };    this.bounceOfCeling = function() {            this.dy=-this.dy;            this.boundarySnd.play();    };    this.bounceBack = function() {            this.dy=-this.dy;            this.dx=-this.dx;            this.boundarySnd.play();    };        // Direction of the ball (needed when hitting corners)    this.goingDownRight = function() {            return (this.dx==1 && this.dy==1);	    };     this.goingUpRight = function() {            return (this.dx==1 && this.dy==-1);	    };     this.goingDownLeft = function() {            return (this.dx==-1 && this.dy==1);	    };     this.goingUpLeft = function() {            return (this.dx==-1 && this.dy==-1);	    };       this.draw = function() {            //  Clear the old ball            this.canvas.Context.clearRect(this.X-this.Radius,this.Y-this.Radius,this.Diameter,this.Diameter);            // Move the ball            this.move();                 // Draw the ball                        this.canvas.Context.beginPath();            var gradient = this.canvas.Context.createRadialGradient(this.X, this.Y, 5, this.X+10, this.Y+10, 40)            gradient.addColorStop(0, 'White');            gradient.addColorStop(.5, 'Gray');            this.canvas.Context.fillStyle = gradient;            // Draws a circle of radius 20             this.canvas.Context.arc(this.X,this.Y,this.Radius,0,Math.PI*2,true);            this.canvas.Context.closePath();            this.canvas.Context.fill();    };        this.hitLower = function() {         if(this.Lower()>=this.canvas.Lower)             return true;         else            return false;     };        this.withinRectangle = function(rect){        if(this.Upper() <= rect.Lower && this.Lower() >= rect.Upper && this.Left() <= rect.Right && this.Right() >= rect.Left) {        return true;      }else        return false;    };        this.intersects = function(bar){             if(this.Right()>=bar.X && this.Left()<=bar.X+bar.Width){                this.bounceOfCeling();                // bounce back                return true;            }else {// Ball is out                this.outSnd.play();                return false;            }	};}